---
# role: ansible-role-borg-backup
# file: tasks/tasks.yml

- name: Set os_family dependent variables
  include_vars: '{{ ansible_os_family }}.yml'

- name: Set distribution dependent variables
  include_vars: '{{ vars_file }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'
      skip: true
  loop_control:
    loop_var: vars_file

- name: Install dependency packages for ansible-role-borg-backup
  package:
    name: "{{ borg_backup_packages }}"
    state: present
  when: not _skip_package_install

- name: Install borg-backup package
  package:
    name: "{{ borg_backup_package }}"
    state: present
  when:
    - borg_backup_package_available
    - not borg_force_binary_installation

- name: include tasks for manual installation with binary package
  include_tasks: binary-install.yml
  when: |
    (not borg_backup_package_available)
    or borg_force_binary_installation

- name: Create borg client scripts
  template:
    dest: /usr/local/bin/borg-{{ bc.name }}
    src: borg-backup.sh.j2
    owner: root
    group: root
    mode: '0744'
  loop: "{{ borg_configs }}"
  loop_control:
    loop_var: bc  # short for borg_config
    label: "{{ bc.name }}"
  when: borg_client_config_enabled | bool

# ssh-key-generation and location
# configure ssh-key on backup destination
#   including restrictive access and append only
# example: command="borg serve --restrict-to-repository /home/borg/backup/reponame.borg" {{ssh_public_key}}

# server setup and configuration
# - name: configure borg server
# I think this has to be a different play...
# Maybe we could add required authorized_keys lines to a array and run that config step afterwards?
# Problem might be, that initialization does only work after this step... hmmm

# configure ssh options for borg: see https://borgbackup.readthedocs.io/en/stable/usage/serve.html for more information

# backup retries

- name: Create Crontab entry
  ansible.builtin.cron:
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html
    backup: "{{ bc.cron.backup | default(omit) }}"
    special_time: "{{ bc.cron.special_time | default(omit) }}"
    minute: "{{ bc.cron.minute | default(omit) }}"
    hour: "{{ bc.cron.hour | default(omit) }}"
    weekday: "{{ bc.cron.weekday | default(omit) }}"
    day: "{{ bc.cron.day | default(omit) }}"
    month: "{{ bc.cron.month | default(omit) }}"
    state: "{{ bc.cron.state | default(omit) }}"
    name: "{{ bc.name }}"
    job: "/usr/local/bin/borg-{{ bc.name }} backup"
    user: root
  loop: "{{ borg_configs }}"
  loop_control:
    loop_var: bc  # short for borg_config
    label: "{{ bc.name }}"
  when:
    borg_client_config_enabled | bool and
    bc.cron is defined
